generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  displayName  String
  passwordHash String
  houseId      String?
  house        House?  @relation(fields: [houseId], references: [id], onDelete: SetNull)

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  choresAssigned   Chore[]           @relation("Chore_assignedTo")
  choreCompletions ChoreCompletion[]

  @@index([houseId])
}

model House {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  items         Item[]
  shoppingLists ShoppingList[]
  chores        Chore[]
  Recipe        Recipe[]
}

model Item {
  id         String   @id @default(cuid())
  houseId    String
  house      House    @relation(fields: [houseId], references: [id], onDelete: Cascade)
  name       String
  category   String
  unit       String
  tags       String[] @default([])
  isArchived Boolean  @default(false)

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ShoppingListItem ShoppingListItem[]
  RecipeIngredient RecipeIngredient[]

  @@unique([houseId, name])
  @@index([houseId, isArchived])
}

model ShoppingList {
  id         String  @id @default(cuid())
  houseId    String
  house      House   @relation(fields: [houseId], references: [id], onDelete: Cascade)
  title      String
  isArchived Boolean @default(false)

  items ShoppingListItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([houseId, title])
  @@index([houseId, isArchived])
}

model ShoppingListItem {
  id     String       @id @default(cuid())
  listId String
  list   ShoppingList @relation(fields: [listId], references: [id], onDelete: Cascade)

  itemId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Restrict)

  quantity     Decimal @db.Decimal(10, 2)
  unitOverride String?
  note         String?
  isChecked    Boolean @default(false)
  checkedById  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([listId, itemId])
  @@index([listId, isChecked])
}

enum ChoreFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

model Chore {
  id      String @id @default(cuid())
  houseId String
  house   House  @relation(fields: [houseId], references: [id], onDelete: Cascade)

  title        String
  frequency    ChoreFrequency
  assignedToId String?
  assignedTo   User?          @relation("Chore_assignedTo", fields: [assignedToId], references: [id], onDelete: SetNull)

  isArchived Boolean @default(false)

  completions ChoreCompletion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([houseId, isArchived])
  @@index([houseId, frequency])
}

model ChoreCompletion {
  id      String @id @default(cuid())
  choreId String
  chore   Chore  @relation(fields: [choreId], references: [id], onDelete: Cascade)

  completedById String
  completedBy   User   @relation(fields: [completedById], references: [id], onDelete: Restrict)

  note        String?
  completedAt DateTime @default(now())

  @@index([choreId, completedAt])
}

enum RecipeType {
  MEAL
  DESSERT
}

model Recipe {
  id      String @id @default(cuid())
  houseId String
  house   House  @relation(fields: [houseId], references: [id], onDelete: Cascade)

  title String
  type  RecipeType
  tags  String[]   @default([])
  notes String?
  text  String?

  ingredients RecipeIngredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([houseId, type])
  @@index([houseId])
}

model RecipeIngredient {
  id       String @id @default(cuid())
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  itemId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Restrict)

  quantity     Decimal @db.Decimal(10, 2)
  unitOverride String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([recipeId, itemId])
}
